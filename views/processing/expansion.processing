class ExpandBall extends Ball {
  float vradius;
  float radius;

  ExpandBall (){
    super();
    vx = 0;
    vy = 0;
    radius = 1;
    vradius = 1;
    reposition();
  }

  void reposition(){
    int numBalls = balls.size();
    boolean non_cross;
    while(true){
      x = random(width);
      y = random(height);
      non_cross = true;
      for(int i=0; i<numBalls; i++){
        if(checkCrossWithBall(balls.get(i))){
          non_cross = false;
          break;
        }
      }
      if(non_cross){
        break;
      }
    }
  }

  void expand(){
    radius += vradius;
  }

  void change(){
    vradius *= -1;
  }

  boolean checkCrossWithBall(Ball ball1){
    float dx = ball1.x - x;
    float dy = ball1.y - y;
    float dist = sqrt(sq(dx) + sq(dy));
    float minDist = radius + ball1.radius;
    return (dist < minDist);
  }
}

ArrayList balls = new ArrayList();

void setup() {
  size(800, 400);
  frameRate(40);
  for (int i = 0; i < 40; i ++){
    balls.add(new ExpandBall());
  }
}
 
void draw() {
  background(255);
  int numBalls = balls.size();
  ExpandBall ball0;
  ExpandBall ball1;
  ArrayList nouse_list = new ArrayList();

  for (int i = 0; i < numBalls; i++){
    balls.get(i).expand();
  }

  for (int i = 0; i < numBalls; i++){
    ball0 = balls.get(i);
    if (ball0.vradius > 0){
      for (int j = i+1; j < numBalls; j++){
        ball1 = balls.get(j);
        if((ball0 != ball1) && ball0.checkCrossWithBall(ball1)){
          ball0.change();
          ball1.change();
        }
      }
    }
    if (ball0.radius < 0){
      ball0.change();
      ball0.reposition();
    }
    ball0.show();
  }

  int numNoUse = nouse_list.size();
  for(int i=0;i<numNoUse;i++){
    balls.remove(nouse_list.get(i));
    balls.add(new ExpandBall());
  }

  if(numBalls > 800){
    noloop();
  }
}
